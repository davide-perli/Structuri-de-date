#include <iostream>
#include <climits> // Pentru a folosi constante pentru limitele valorilor întregi
using namespace std;

class Node {
public:
    int Value;
    Node* Next;
    Node* Prev;

    Node(int value) : Value(value), Next(nullptr), Prev(nullptr) {}
};

void printList(Node* head) {
    if (head == nullptr) return;

    Node* temp = head;
    do {
        cout << temp->Value << endl;
        temp = temp->Next;
    } while (temp != head);
}

void insertAtFront(Node** head, int newValue) {
    Node* newNode = new Node(newValue);
    if (*head == nullptr) {
        newNode->Next = newNode;
        newNode->Prev = newNode;
        *head = newNode;
    } else {
        Node* tail = (*head)->Prev;
        newNode->Next = *head;
        newNode->Prev = tail;
        tail->Next = newNode;
        (*head)->Prev = newNode;
        *head = newNode;
    }
}

void insertAtEnd(Node** head, int newValue) {
    Node* newNode = new Node(newValue);
    if (*head == nullptr) {
        newNode->Next = newNode;
        newNode->Prev = newNode;
        *head = newNode;
    } else {
        Node* tail = (*head)->Prev;
        tail->Next = newNode;
        newNode->Prev = tail;
        newNode->Next = *head;
        (*head)->Prev = newNode;
    }
}

void insertAfter(Node* previous, int newValue) {
    if (previous == nullptr) {
        cout << "Previous can't be NULL";
        return;
    }
    Node* newNode = new Node(newValue);
    Node* nextNode = previous->Next;
    newNode->Next = nextNode;
    newNode->Prev = previous;
    previous->Next = newNode;
    nextNode->Prev = newNode;
}

// Funcție pentru a găsi valoarea minimă din listă
int minValue(Node* head) {
    if (head == nullptr) return INT_MAX;
    int minVal = head->Value;
    Node* temp = head->Next;
    while (temp != head) {
        if (temp->Value < minVal) {
            minVal = temp->Value;
        }
        temp = temp->Next;
    }
    return minVal;
}

// Funcție pentru a găsi valoarea maximă din listă
int maxValue(Node* head) {
    if (head == nullptr) return INT_MIN;
    int maxVal = head->Value;
    Node* temp = head->Next;
    while (temp != head) {
        if (temp->Value > maxVal) {
            maxVal = temp->Value;
        }
        temp = temp->Next;
    }
    return maxVal;
}

// Funcție pentru a căuta un element în listă
bool search(Node* head, int target) {
    if (head == nullptr) return false;
    Node* temp = head;
    do {
        if (temp->Value == target) return true;
        temp = temp->Next;
    } while (temp != head);
    return false;
}

// Funcție pentru a găsi predecesorul unui element în listă
Node* predecesor(Node* head, int target) {
    if (head == nullptr || head->Value == target) return nullptr;
    Node* temp = head;
    do {
        if (temp->Next->Value == target) return temp;
        temp = temp->Next;
    } while (temp != head);
    return nullptr;
}

int main() {
    Node* head = new Node(1); // Primul nod
    head->Next = head;
    head->Prev = head;

    insertAtFront(&head, 0);
    insertAtFront(&head, -2);

    insertAtEnd(&head, 5);
    insertAtEnd(&head, 6);

    insertAfter(head, -1);
    insertAfter(head->Next->Next, 3);

    printList(head);

    // Găsim și afișăm valoarea minimă și valoarea maximă din listă
    cout << "Valoarea minima din lista: " << minValue(head) << endl;
    cout << "Valoarea maxima din lista: " << maxValue(head) << endl;

    // Căutăm elementul dorit în listă și afișăm rezultatul
    int elementCautat = 3;
    if (search(head, elementCautat))
        cout << "Elementul " << elementCautat << " a fost gasit in lista.\n";
    else
        cout << "Elementul " << elementCautat << " nu a fost gasit in lista.\n";

    // Afișăm predecesorul elementului căutat (dacă există)
    Node* predecesorElement = predecesor(head, elementCautat);
    if (predecesorElement != nullptr)
        cout << "Predecesorul elementului " << elementCautat << " este: " << predecesorElement->Value << endl;
    else
        cout << "Elementul " << elementCautat << " nu are predecesor.\n";

    return 0;
}
