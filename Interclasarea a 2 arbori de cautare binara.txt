#include <iostream>
#include <cstdlib> // pentru malloc
using namespace std;

// Structura pentru un nod al arborelui de căutare binară (BST)
struct node 
{
    int key; // cheia sau valoarea stocată în nod
    struct node* left, *right; // pointeri către copiii stânga și dreapta
};

// Funcție pentru crearea unui nou nod al BST-ului
struct node* newNode(int item)
{
    // Alocare memorie pentru noul nod folosind malloc
    struct node* temp = (struct node*)malloc(sizeof(struct node));
    temp->key = item; // Inițializare valoare nodului
    temp->left = temp->right = NULL; // Inițializare pointeri la copii
    return temp;
}

// Funcție pentru inserarea unui nod într-un BST
struct node* insert(struct node* node, int key)
{
    // Dacă nodul curent este NULL, creăm un nou nod
    if (node == NULL)
        return newNode(key);

    // Dacă valoarea de inserat este mai mică decât valoarea nodului curent,
    // continuăm inserarea în subarborele stâng
    if (key < node->key)
        node->left = insert(node->left, key);
    // Dacă valoarea de inserat este mai mare decât valoarea nodului curent,
    // continuăm inserarea în subarborele drept
    else if (key > node->key)
        node->right = insert(node->right, key);

    // Returnăm nodul curent (posibil modificat)
    return node;
}

// Funcție pentru a interclasa doi arbori binari de căutare echilibrați
struct node* mergeTrees(struct node* root1, struct node* root2) 
{
    // Dacă unul dintre arbori este gol, returnăm celălalt arbore
    if (root1 == NULL)
        return root2;
    if (root2 == NULL)
        return root1;

    // Interclasarea subarborilor stângi și drepți
    root1->left = mergeTrees(root1->left, root2->left);
    root1->right = mergeTrees(root1->right, root2->right);

    // Inserăm valoarea rădăcinii celui de-al doilea arbore în primul arbore
    return insert(root1, root2->key);
}

// Funcție pentru traversarea în ordine a BST-ului și afișarea valorilor
void inorder(struct node* root) 
{
    if (root != NULL) 
    {
        // Traversăm recursiv subarborele stâng
        inorder(root->left);
        // Afișăm valoarea nodului curent
        cout << " " << root->key;
        // Traversăm recursiv subarborele drept
        inorder(root->right);
    }
}

int main() {
    // Crearea primului arbore binar de căutare echilibrat
    struct node* root1 = NULL;
    root1 = insert(root1, 50);
    insert(root1, 30);
    insert(root1, 20);
    insert(root1, 40);
    insert(root1, 70);
    insert(root1, 60);
    insert(root1, 80);

    // Crearea celui de-al doilea arbore binar de căutare echilibrat
    struct node* root2 = NULL;
    root2 = insert(root2, 55);
    insert(root2, 35);
    insert(root2, 25);
    insert(root2, 45);
    insert(root2, 75);
    insert(root2, 65);
    insert(root2, 85);

    // Interclasarea celor doi arbori binari de căutare echilibrați
    struct node* mergedRoot = mergeTrees(root1, root2);

    // Afișarea traversării în ordine a arborelui rezultat
    cout << "Traversarea in ordine a arborelui rezultat:";
    inorder(mergedRoot);

    return 0;
}
