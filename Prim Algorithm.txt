#include <bits/stdc++.h>
using namespace std;

#define V 5 // Numarul varfului ale grafului

// Functie pentru a gasi varful cu key value minima
int minKey(int key[], bool mstSet[]) {
    int min = INT_MAX, min_index;
    for (int v = 0; v < V; v++)
        if (!mstSet[v] && key[v] < min)
            min = key[v], min_index = v;
    return min_index;
}

// functie pentru a printa MST (MInimum Spanning Tree / Arbore de intindere minima) constuit in array-ul parent[]
void printMST(int parent[], int graph[V][V]) {
    cout << "Edge \tWeight\n";
    for (int i = 1; i < V; i++)
        cout << parent[i] << " - " << i << " \t" << graph[i][parent[i]] << " \n";
}

// Functie pentru a construi si afisa MST pentru un graf reprezentat printr-o matrice de adiacenta
void primMST(int graph[V][V]) {
    int parent[V]; // Array pentru a stoca MST-ul construit
    int key[V]; // Key values pentru a selecta muchia cu cea mai mica greutate
    bool mstSet[V]; // Pentru a reprezenta setul de varfuri incluse in MST

    // Initializez toate cheile ca INFINITE si mstSet[] ca false
    for (int i = 0; i < V; i++)
        key[i] = INT_MAX, mstSet[i] = false;

    // Mereu includ primul nod in MST
    key[0] = 0;
    parent[0] = -1; // Primul nod e mereu radacina MST-ului

    // MST-ul va avea V varfuri
    for (int count = 0; count < V - 1; count++) {
        // Aleg varful cu cheia mininima din setul de varfuri care inca nu sunt incluse in MST
        int u = minKey(key, mstSet);
        mstSet[u] = true;

        // Actualizam key value si indexul parent-ului al matricei de adiacenta al varfurilor alese
            if (graph[u][v] && !mstSet[v] && graph[u][v] < key[v])
                parent[v] = u, key[v] = graph[u][v];
    }

    // Afisam MST-ul construit
    printMST(parent, graph);
}


int main() {
    int graph[V][V] = { { 0, 2, 0, 6, 0 },
                        { 2, 0, 3, 8, 5 },
                        { 0, 3, 0, 0, 7 },
                        { 6, 8, 0, 0, 9 },
                        { 0, 5, 7, 9, 0 } };

    primMST(graph);
    return 0;
}
